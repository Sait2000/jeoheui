# coding: utf-8

import io

try:
    unichr = unichr
except NameError:
    unichr = chr

CELL_SIZE = 12
CELL_SIZE_HALF = 6


def main():
    vowels = (
        u'ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘ'
        u'ㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢ'
        u'ㅣ'
    )
    vowel_roman_names = {
        u'ㅏ': u'a',
        u'ㅑ': u'ya',
        u'ㅓ': u'eo',
        u'ㅕ': u'yeo',
        u'ㅗ': u'o',
        u'ㅛ': u'yo',
        u'ㅜ': u'u',
        u'ㅠ': u'yu',
        u'ㅡ': u'eu',
        u'ㅢ': u'ui',
        u'ㅣ': u'i',
        u'default': u'default',
    }
    hangul_part_combinations = {
        u'ㅏ': [speed_one, speed_one, speed_one, branch],
        u'ㅑ': [speed_two, speed_two, speed_two, branch],
        u'ㅓ': [speed_one, branch, speed_one, speed_one],
        u'ㅕ': [speed_two, branch, speed_two, speed_two],
        u'ㅗ': [speed_one, speed_one, branch, speed_one],
        u'ㅛ': [speed_two, speed_two, branch, speed_two],
        u'ㅜ': [branch, speed_one, speed_one, speed_one],
        u'ㅠ': [branch, speed_two, speed_two, speed_two],
        u'ㅡ': [reflect, pass_, reflect, pass_],
        u'ㅢ': [reflect] * 4,
        u'ㅣ': [pass_, reflect, pass_, reflect],
        u'default': [pass_] * 4,
    }

    nop_template_names = [
        u'nop',
        u'nop_ignored_h',
        u'nop_ignored_v',
        u'nop_ignored',
    ]
    nop_part_combinations = {
        u'nop': [nop] * 4,
        u'nop_ignored_h': [nop_ignored, nop, nop_ignored, nop],
        u'nop_ignored_v': [nop, nop_ignored, nop, nop_ignored],
        u'nop_ignored': [nop_ignored] * 4,
    }

    with io.open('template.py', 'w',
                 encoding='utf-8', newline=u'\n') as file_w:
        file_w.write(u'# coding: utf-8\n')
        file_w.write(u'# generated by make_template.py\n')
        file_w.write(u'\n')

        def write_template(name, template):
            file_w.write(u'template_{} = [\n'.format(name))
            for line in template:
                file_w.write(u'    u\'{}\',\n'.format(line))
            file_w.write(u']\n')
            file_w.write(u'\n')

        def write_template_list(list_name, names):
            file_w.write(u'{} = [\n'.format(list_name))
            for name in names:
                file_w.write(u'    template_{},\n'.format(name))
            file_w.write(u']\n')

        for vowel in sorted(vowel_roman_names):
            vowel_roman = vowel_roman_names[vowel]
            hangul_template = combine_parts(hangul_part_combinations[vowel])
            write_template(vowel_roman, hangul_template)

        write_template_list(u'hangul_templates',
                            [vowel_roman_names.get(vowel, u'default')
                             for vowel in vowels])
        file_w.write(u'\n')
        file_w.write(u'\n')

        for nop_name in nop_template_names:
            nop_template = combine_parts(nop_part_combinations[nop_name])
            write_template(nop_name, nop_template)

        write_template_list(u'nop_templates', nop_template_names)
        file_w.write(u'\n')
        file_w.write(u'\n')

        border_top = concat_h(border, rotate_180(border))
        border_left = rotate_right(border_top)
        border_top_naive = concat_h(border_naive, rotate_180(border_naive))
        border_left_naive = rotate_right(border_top_naive)

        write_template(u'border_top', border_top)
        write_template(u'border_left', border_left)
        write_template(u'border_top_naive', border_top_naive)
        write_template(u'border_left_naive', border_left_naive)


def combine_parts(combination):
    part1, part2, part3, part4 = combination
    part2 = rotate_right(part2)
    part3 = rotate_180(part3)
    part4 = rotate_left(part4)
    template = concat_v(concat_h(part1, part2),
                        concat_h(part4, part3))
    return template


def rotate_right(lines):
    """

    :param lines:
    :return:

    :type lines: List[Text]
    :rtype: List[Text]
    """
    old_height = len(lines)
    old_width = len(lines[0])
    new_height = old_width
    new_width = old_height
    res = []
    for new_row in range(new_height):
        res.append(u'')
        for new_col in range(new_width):
            old_row = (old_height - 1) - new_col
            old_col = new_row
            old_char = lines[old_row][old_col]
            new_char = rotate_char_right(old_char)
            res[-1] += new_char
    return res


def rotate_left(lines):
    """

    :param lines:
    :return:

    :type lines: List[Text]
    :rtype: List[Text]
    """
    return rotate_right(rotate_180(lines))


def rotate_180(lines):
    """

    :param lines:
    :return:

    :type lines: List[Text]
    :rtype: List[Text]
    """
    return rotate_right(rotate_right(lines))


def rotate_char_curried(vowel_mapping):
    def rotate_char(char):
        code_point = ord(char)
        if 0xAC00 <= code_point <= 0xD7A3:
            vowel = (code_point - 0xAC00) // 28 % 21
            code_point += (vowel_mapping[vowel] - vowel) * 28
            return unichr(code_point)
        return char
    return rotate_char


def concat_h(left, right):
    if len(left) != len(right):
        raise ValueError()
    return [left_line + right_line
            for left_line, right_line in zip(left, right)]


def concat_v(top, bottom):
    res = top + bottom
    if res and len(min(res, key=len)) != len(max(res, key=len)):
        raise ValueError()
    return res


rotate_char_right = rotate_char_curried((
    13, 1, 17, 3, 8, 5, 12, 7, 0, 9, 10,
    11, 2, 4, 14, 15, 16, 6, 20, 19, 18,
))


branch = [
    u'ㅇ야ㅇ아유유',
    u'ㅇㅇㅇㅇ야ㅇ',
    u'ㅇㅇㅇ유유여',
    u'어ㅇ여어요여',
    u'ㅇㅇㅇ유아우',
    u'ㅇ우어처요여',
]


speed_one = [
    u'ㅇ야ㅇ아유유',
    u'어어ㅇ여ㅇ여',
    u'ㅇㅇㅇ유유여',
    u'어요여어ㅇ여',
    u'ㅇㅇㅇ유아우',
    u'ㅇ요ㅇㅇㅇ우',
]


speed_two = [
    u'ㅇ야ㅇ아유유',
    u'ㅇ유ㅇ여ㅇ여',
    u'ㅇㅇㅇ유유여',
    u'어유여어ㅇ여',
    u'ㅇㅇㅇ유아우',
    u'어어ㅇㅇㅇ우',
]


pass_ = [
    u'유처우유ㅇ유',
    u'어어야여야여',
    u'아유유처야유',
    u'어요여유여여',
    u'ㅇ유아유ㅇ유',
    u'어요여어요어',
]


reflect = [
    u'유차우유ㅇ유',
    u'어어야여야여',
    u'아유유차야유',
    u'어요여유여여',
    u'ㅇ유아유ㅇ유',
    u'어요여어요어',
]


nop = [
    u'ㅇ유ㅇ유ㅇ유',
    u'어어ㅇ여ㅇ여',
    u'ㅇ유ㅇ유ㅇ유',
    u'어유여여ㅇ여',
    u'ㅇ유ㅇ유ㅇ유',
    u'어어요어ㅇ여',
]


nop_ignored = [
    u'ㅇ유ㅇ유ㅇ유',
    u'어어ㅇ여ㅇ여',
    u'ㅇ유ㅇ유ㅇ유',
    u'어어ㅇ여ㅇ여',
    u'ㅇ유ㅇ유ㅇ유',
    u'어어ㅇ여ㅇ여',
]


border_intersection = [u'아']
border = [u'아우ㅇ우ㅇ여']
border_naive = [u'아우ㅇ우ㅇ우']  # TODO: rename


if __name__ == '__main__':
    main()
